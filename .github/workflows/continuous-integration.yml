# GitHub Actions Documentation: https://docs.github.com/en/actions

name: "build"

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  COMPOSER_ROOT_VERSION: "1.99.99"

jobs:
  coding-standards:
    name: "Coding standards"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3.0.1"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.18.1"
        with:
          php-version: "latest"
          extensions: "intl-70.1"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@2.1.0"

      - name: "Check syntax (php-parallel-lint)"
        run: "composer dev:lint:syntax"

      - name: "Check coding standards (PHP_CodeSniffer)"
        run: "composer dev:lint:style"

  static-analysis:
    name: "Static analysis"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3.0.1"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.18.1"
        with:
          php-version: "latest"
          extensions: "intl-70.1"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@2.1.0"

      - name: "Statically analyze code (PHPStan)"
        run: "composer dev:analyze:phpstan"

      - name: "Statically analyze code (Psalm)"
        run: "composer dev:analyze:psalm"
        # NOTE: Do not report to Shepherd until the repo is public.
        #run: "composer dev:analyze:psalm -- --shepherd"

  # NOTE: Repository must be public to enable security analysis on GitHub.
  #security-analysis:
  #  name: "Security analysis"
  #  needs: ["coding-standards", "static-analysis"]
  #  runs-on: "ubuntu-latest"
  #  steps:
  #    - name: "Checkout repository"
  #      uses: "actions/checkout@v3.0.1"
  #
  #    - name: "Install PHP"
  #      uses: "shivammathur/setup-php@2.18.1"
  #      with:
  #        php-version: "latest"
  #        extensions: "intl-70.1"
  #        coverage: "none"
  #
  #    - name: "Install dependencies (Composer)"
  #      uses: "ramsey/composer-install@2.1.0"
  #
  #    - name: "Analyze security of code (Psalm)"
  #      run: "./vendor/bin/psalm --taint-analysis --report=build/logs/psalm.sarif"
  #
  #    - name: "Upload security analysis results to GitHub"
  #      uses: "github/codeql-action/upload-sarif@v1"
  #      with:
  #        sarif_file: "build/logs/psalm.sarif"

  code-coverage:
    name: "Code coverage"
    needs: ["coding-standards", "static-analysis"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3.0.1"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.18.1"
        with:
          php-version: "latest"
          extensions: "intl-70.1"
          coverage: "pcov"
          ini-values: "memory_limit=-1"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@2.1.0"

      - name: "Run unit tests and generate coverage report (PHPUnit)"
        run: "composer dev:test:coverage:ci"

      - name: "Publish code coverage to CodeClimate"
        uses: "paambaati/codeclimate-action@v3.0.0"
        env:
          CC_TEST_REPORTER_ID: "${{secrets.CC_TEST_REPORTER_ID}}"
        with:
          coverageLocations: |
            ${{github.workspace}}/build/coverage/clover.xml:clover

      # NOTE: Use Codecov only for public repositories.
      #- name: "Publish coverage report to Codecov"
      #  uses: "codecov/codecov-action@v3.0.0"

  unit-tests:
    name: "Unit tests"
    needs: ["code-coverage"]
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.4"
          - "8.0"
          - "8.1"
        dependencies:
          - "lowest"
          - "highest"
        exclude:
          - php-version: "8.1"
            dependencies: "lowest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v3.0.1"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@2.18.1"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "intl-70.1"
          coverage: "none"

      - name: "Install dependencies (Composer)"
        uses: "ramsey/composer-install@2.1.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run unit tests (PHPUnit)"
        run: "composer dev:test:unit"
